import 'dart:developer';
import '../auth/api_client.dart';
// import c√°c DTO n·∫øu ch√∫ng ·ªü file ri√™ng
// import 'bill_dtos.dart'; 

class BillService {
  final ApiClient apiClient;
  BillService(this.apiClient);

  /// L·∫•y danh s√°ch h√≥a ƒë∆°n ch∆∞a thanh to√°n.
  Future<List<BillDto>> getUnpaidBills() async {
    try {
      final res = await apiClient.dio.get('/bills/unpaid');
      // API tr·∫£ v·ªÅ Map<String, dynamic> v·ªõi key 'data' ch·ª©a List
      return (res.data['data'] as List)
          .map((json) => BillDto.fromJson(json))
          .toList();
    } catch (e, s) {
      log('‚ùå L·ªói getUnpaidBills: $e\n$s');
      rethrow;
    }
  }

  /// L·∫•y danh s√°ch h√≥a ƒë∆°n ƒë√£ thanh to√°n.
  Future<List<BillDto>> getPaidBills() async {
    try {
      final res = await apiClient.dio.get('/bills/paid');
      return (res.data['data'] as List)
          .map((json) => BillDto.fromJson(json))
          .toList();
    } catch (e, s) {
      log('‚ùå L·ªói getPaidBills: $e\n$s');
      rethrow;
    }
  }

  /// Thanh to√°n h√≥a ƒë∆°n theo ID.
  /// Spring Controller tr·∫£ v·ªÅ Bill, n√™n Service n√™n tr·∫£ v·ªÅ BillDto ƒë√£ thanh to√°n.
  Future<BillDto> payBill(int billId) async {
    try {
      final res = await apiClient.dio.post('/bills/$billId/pay');
      // Controller tr·∫£ v·ªÅ Map c√≥ key 'data' ch·ª©a ƒë·ªëi t∆∞·ª£ng Bill ƒë√£ thanh to√°n
      return BillDto.fromJson(res.data['data']);
    } catch (e, s) {
      log('‚ùå L·ªói payBill($billId): $e\n$s');
      rethrow;
    }
  }

  /// L·∫•y chi ti·∫øt h√≥a ƒë∆°n theo ID.
  Future<BillDto> getBillDetail(int id) async {
    try {
      final res = await apiClient.dio.get('/bills/$id');
      // Controller tr·∫£ v·ªÅ Map c√≥ key 'data' ch·ª©a ƒë·ªëi t∆∞·ª£ng Bill
      return BillDto.fromJson(res.data['data']);
    } catch (e, s) {
      log('‚ùå L·ªói getBillDetail($id): $e\n$s');
      rethrow;
    }
  }

  /// L·∫•y th·ªëng k√™ h√≥a ƒë∆°n theo th√°ng v√† lo·∫°i.
  Future<List<BillStatistics>> getStatistics({String billType = 'T·∫•t c·∫£'}) async {
    try {
      // mappedType l√† null n·∫øu l√† 'T·∫•t c·∫£', API Spring Controller s·∫Ω d√πng defaultValue='ALL'
      final mappedType = _mapBillType(billType); 
      
      final res = await apiClient.dio.get(
        '/bills/statistics',
        queryParameters: {
          if (mappedType != null) 'billType': mappedType,
          // N·∫øu mappedType l√† null, query parameter 'billType' s·∫Ω kh√¥ng ƒë∆∞·ª£c g·ª≠i, 
          // v√† Controller s·∫Ω d√πng defaultValue "ALL".
        },
      );

      if (res.data == null || res.data['data'] == null) {
        log('‚ö†Ô∏è API tr·∫£ v·ªÅ null khi getStatistics($billType)');
        return [];
      }

      return (res.data['data'] as List)
          .map((json) => BillStatistics.fromJson(json))
          .toList();
    } catch (e, s) {
      log('‚ùå L·ªói getStatistics($billType): $e\n$s');
      rethrow;
    }
  }

  /// L·∫•y danh s√°ch h√≥a ƒë∆°n theo th√°ng v√† lo·∫°i.
  Future<List<BillDto>> getBillsByMonthAndType(String month, {String billType = 'T·∫•t c·∫£'}) async {
    try {
      final mappedType = _mapBillType(billType);
      log('üì° [BillService] Fetching bills => month: $month | type: $mappedType');

      final res = await apiClient.dio.get(
        '/bills/by-month',
        queryParameters: {
          'month': month,
          if (mappedType != null) 'billType': mappedType,
          // N·∫øu mappedType l√† null, billType s·∫Ω kh√¥ng ƒë∆∞·ª£c g·ª≠i
        },
      );

      if (res.statusCode != 200) {
        log('‚ö†Ô∏è API tr·∫£ m√£ ${res.statusCode}: ${res.data}');
        // N·∫øu API tr·∫£ l·ªói (400), n√©m Exception v·ªõi message t·ª´ server n·∫øu c√≥
        throw Exception(res.data['message'] ?? 'Server tr·∫£ l·ªói ${res.statusCode}');
      }

      final data = res.data['data'] as List?;
      if (data == null || data.isEmpty) {
        log('‚ÑπÔ∏è Kh√¥ng c√≥ h√≥a ƒë∆°n n√†o cho th√°ng $month v√† lo·∫°i $billType');
        return [];
      }

      return data.map((json) => BillDto.fromJson(json)).toList();
    } catch (e, s) {
      log('‚ùå L·ªói getBillsByMonthAndType($month, $billType): $e\n$s');
      rethrow;
    }
  }

  /// H√†m √°nh x·∫° lo·∫°i h√≥a ƒë∆°n t·ª´ ng√¥n ng·ªØ ng∆∞·ªùi d√πng sang enum/String c·ªßa API.
  String? _mapBillType(String type) {
    switch (type.toUpperCase()) {
      case 'ƒêI·ªÜN':
      case 'DIEN':
      case 'ELECTRIC':
      case 'ELECTRICITY':
        return 'ELECTRICITY';
      case 'N∆Ø·ªöC':
      case 'NUOC':
      case 'WATER':
        return 'WATER';
      case 'INTERNET':
        return 'INTERNET';
      case 'T·∫§T C·∫¢':
      case 'TAT CA':
      case 'ALL':
        return null; // Tr·∫£ v·ªÅ null ƒë·ªÉ kh√¥ng th√™m query param, API s·∫Ω d√πng ALL m·∫∑c ƒë·ªãnh.
      default:
        return null;
    }
  }
}

// --- DTO C·∫≠p Nh·∫≠t ---

class BillDto {
  final int id;
  final String billType;
  final double amount;
  final String status;
  final String billingMonth; // ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ kh·ªõp h∆°n v·ªõi JSON
  final String paymentDate; // ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ kh·ªõp h∆°n v·ªõi JSON
  final String? description; // Th√™m tr∆∞·ªùng c√≥ th·ªÉ c√≥

  BillDto({
    required this.id,
    required this.billType,
    required this.amount,
    required this.status,
    required this.billingMonth,
    required this.paymentDate,
    this.description,
  });

  factory BillDto.fromJson(Map<String, dynamic> json) {
    return BillDto(
      // ID t·ª´ Long (Java) sang int (Dart)
      id: (json['id'] is String) ? int.tryParse(json['id']) ?? 0 : json['id'] ?? 0, 
      billType: json['billType'] ?? '',
      amount: (json['amount'] is num) ? json['amount'].toDouble() : 0.0,
      status: json['status'] ?? 'UNKNOWN',
      billingMonth: json['billingMonth'] ?? '', // Kh·ªõp v·ªõi t√™n tr∆∞·ªùng trong API
      paymentDate: json['paymentDate'] ?? '', // Kh·ªõp v·ªõi t√™n tr∆∞·ªùng trong API
      description: json['description'],
    );
  }
}

class BillStatistics {
  final String month;
  final String billType;
  final double totalAmount;

  BillStatistics({
    required this.month,
    required this.billType,
    required this.totalAmount,
  });

  factory BillStatistics.fromJson(Map<String, dynamic> json) {
    return BillStatistics(
      month: json['month'] ?? '',
      billType: json['billType'] ?? '',
      totalAmount: (json['totalAmount'] is num) ? json['totalAmount'].toDouble() : 0.0,
    );
  }
}