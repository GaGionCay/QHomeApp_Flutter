import 'dart:developer';
import '../auth/api_client.dart';
import '../models/invoice_line.dart';

class InvoiceService {
  final ApiClient apiClient;
  
  InvoiceService(this.apiClient);

  /// L·∫•y danh s√°ch invoice lines c·ªßa user ƒëang ƒëƒÉng nh·∫≠p
  /// GET /api/invoices/me
  /// L·∫•y unitId t·ª´ user profile trong database
  Future<List<InvoiceLineResponseDto>> getMyInvoices() async {
    try {
      log('üîç [InvoiceService] L·∫•y invoices c·ªßa user hi·ªán t·∫°i');
      
      final res = await apiClient.dio.get('/invoices/me');
      
      if (res.statusCode != 200) {
        log('‚ö†Ô∏è API tr·∫£ m√£ ${res.statusCode}: ${res.data}');
        throw Exception(
            res.data['message'] ?? 'Server tr·∫£ l·ªói ${res.statusCode}');
      }

      final data = res.data['data'] as List?;
      if (data == null || data.isEmpty) {
        log('‚ÑπÔ∏è Kh√¥ng c√≥ invoice n√†o cho user hi·ªán t·∫°i');
        return [];
      }

      final invoices = (data as List)
          .map((json) => InvoiceLineResponseDto.fromJson(json))
          .toList();

      log('‚úÖ [InvoiceService] L·∫•y ƒë∆∞·ª£c ${invoices.length} invoices cho user hi·ªán t·∫°i');
      
      return invoices;
    } catch (e, s) {
      log('‚ùå [InvoiceService] L·ªói getMyInvoices(): $e\n$s');
      rethrow;
    }
  }

  /// L·∫•y danh s√°ch invoice lines theo unitId (deprecated - n√™n d√πng getMyInvoices)
  /// GET /api/invoices/unit/{unitId}
  @Deprecated('Use getMyInvoices() instead')
  Future<List<InvoiceLineResponseDto>> getInvoiceLinesByUnitId(String unitId) async {
    try {
      log('üîç [InvoiceService] L·∫•y invoices cho unitId: $unitId');
      
      final res = await apiClient.dio.get('/invoices/unit/$unitId');
      
      if (res.statusCode != 200) {
        log('‚ö†Ô∏è API tr·∫£ m√£ ${res.statusCode}: ${res.data}');
        throw Exception(
            res.data['message'] ?? 'Server tr·∫£ l·ªói ${res.statusCode}');
      }

      final data = res.data['data'] as List?;
      if (data == null || data.isEmpty) {
        log('‚ÑπÔ∏è Kh√¥ng c√≥ invoice n√†o cho unitId: $unitId');
        return [];
      }

      final invoices = (data as List)
          .map((json) => InvoiceLineResponseDto.fromJson(json))
          .toList();

      log('‚úÖ [InvoiceService] L·∫•y ƒë∆∞·ª£c ${invoices.length} invoices cho unitId: $unitId');
      
      return invoices;
    } catch (e, s) {
      log('‚ùå [InvoiceService] L·ªói getInvoiceLinesByUnitId($unitId): $e\n$s');
      rethrow;
    }
  }

  /// T·∫°o VNPAY payment URL cho invoice
  /// POST /api/invoices/{invoiceId}/vnpay-url
  Future<String> createVnpayPaymentUrl(String invoiceId) async {
    try {
      log('üí≥ [InvoiceService] T·∫°o VNPAY URL cho invoice: $invoiceId');
      
      final res = await apiClient.dio.post('/invoices/$invoiceId/vnpay-url');
      
      if (res.statusCode != 200) {
        log('‚ö†Ô∏è API tr·∫£ m√£ ${res.statusCode}: ${res.data}');
        throw Exception(
            res.data['message'] ?? 'Server tr·∫£ l·ªói ${res.statusCode}');
      }

      if (res.data['paymentUrl'] == null) {
        throw Exception('Kh√¥ng th·ªÉ t·∫°o URL thanh to√°n');
      }

      log('‚úÖ [InvoiceService] T·∫°o VNPAY URL th√†nh c√¥ng cho invoice $invoiceId');
      return res.data['paymentUrl'];
    } catch (e, s) {
      log('‚ùå [InvoiceService] L·ªói createVnpayPaymentUrl($invoiceId): $e\n$s');
      rethrow;
    }
  }

  /// Thanh to√°n invoice - c·∫≠p nh·∫≠t status th√†nh PAID (deprecated - d√πng VNPAY thay th·∫ø)
  /// PUT /api/invoices/{invoiceId}/pay
  Future<void> payInvoice(String invoiceId) async {
    try {
      log('üí≥ [InvoiceService] Thanh to√°n invoice (deprecated): $invoiceId');
      
      final res = await apiClient.dio.put('/invoices/$invoiceId/pay');
      
      if (res.statusCode != 200) {
        log('‚ö†Ô∏è API tr·∫£ m√£ ${res.statusCode}: ${res.data}');
        throw Exception(
            res.data['message'] ?? 'Server tr·∫£ l·ªói ${res.statusCode}');
      }

      log('‚úÖ [InvoiceService] Thanh to√°n invoice $invoiceId th√†nh c√¥ng');
    } catch (e, s) {
      log('‚ùå [InvoiceService] L·ªói payInvoice($invoiceId): $e\n$s');
      rethrow;
    }
  }
}

